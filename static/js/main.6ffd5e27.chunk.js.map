{"version":3,"sources":["actions/types.js","reducers/taskReducer.js","reducers/index.js","store.js","actions/taskActions.js","components/Task/AddTask.js","components/Task/TaskItem.js","components/Task/TaskList.js","components/Header/index.js","components/Filter/index.js","Containers/Tasks.js","App.js","index.js"],"names":["ADD_TASK","DELETE_TASK","EDIT_TASK","IS_SHOW_ADD_TASK","IS_DONE_TASK","SHOW_MODE","initialState","taskList","id","title","date","description","isDone","isShowAddTask","showMode","combineReducers","tasks","state","action","type","payload","filter","task","map","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","f","addTask","data","dispatch","deleteTask","showAddTask","status","value","connect","useDispatch","lastID","useSelector","length","className","onSubmit","e","preventDefault","target","reset","htmlFor","name","cols","rows","style","marginRight","onClick","props","useState","isEditing","setIsEditing","doneStatus","find","newData","defaultValue","handleDelete","defaultChecked","onChange","isDoneTask","TaskList","list","currentShowMode","renderList","item","padding","textAlign","width","Header","Filter","Tasks","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ffd5e27.chunk.js","sourcesContent":["export const ADD_TASK = 'ADD_TASK';\r\nexport const DELETE_TASK = 'DELETE_TASK';\r\nexport const EDIT_TASK = 'EDIT_TASK';\r\nexport const IS_SHOW_ADD_TASK = 'IS_SHOW_ADD_TASK';\r\nexport const IS_DONE_TASK = 'IS_DONE_TASK';\r\nexport const SHOW_MODE = 'SHOW_MODE';","import {\r\n  ADD_TASK,\r\n  DELETE_TASK,\r\n  EDIT_TASK,\r\n  IS_SHOW_ADD_TASK,\r\n  IS_DONE_TASK,\r\n  SHOW_MODE,\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  taskList: [\r\n    {\r\n      id: 1,\r\n      title: \"Task 1\",\r\n      date: \"2020-01-01\",\r\n      description: \"Task 1 description\",\r\n      isDone: false,\r\n    },\r\n  ],\r\n  isShowAddTask: false,\r\n  showMode: \"all\",\r\n};\r\n\r\nexport default function taskReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case ADD_TASK:\r\n      return {\r\n        ...state,\r\n        taskList: [...state.taskList, action.payload],\r\n      };\r\n\r\n    case DELETE_TASK:\r\n      return {\r\n        ...state,\r\n        taskList: state.taskList.filter((task) => task.id !== action.payload),\r\n      };\r\n\r\n    case EDIT_TASK:\r\n      return {\r\n        ...state,\r\n        taskList: state.taskList.map((task) =>\r\n          task.id === action.payload.id ? action.payload : task\r\n        ),\r\n      };\r\n\r\n    case IS_SHOW_ADD_TASK:\r\n      return {\r\n        ...state,\r\n        isShowAddTask: action.payload,\r\n      };\r\n\r\n    case IS_DONE_TASK:\r\n      return {\r\n        ...state,\r\n        taskList: state.taskList.map((task) =>\r\n          task.id === action.payload\r\n            ? {\r\n                ...task,\r\n                isDone: !task.isDone,\r\n              }\r\n            : task\r\n        ),\r\n      };\r\n\r\n    case SHOW_MODE:\r\n      return {\r\n        ...state,\r\n        showMode: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport taskReducer from './taskReducer';\r\n\r\nexport default combineReducers({\r\n    tasks: taskReducer\r\n});","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compose(\r\n        applyMiddleware(...middleware),\r\n        window.__REDUX_DEVTOOLS_EXTENSION__\r\n            ? window.__REDUX_DEVTOOLS_EXTENSION__()\r\n            : f => f\r\n    )\r\n);\r\n\r\nexport default store;","import { ADD_TASK, DELETE_TASK, EDIT_TASK, IS_SHOW_ADD_TASK, IS_DONE_TASK, SHOW_MODE } from \"./types\";\r\n\r\nexport const addTask = (data) => dispatch => {\r\n    dispatch({\r\n        type: ADD_TASK,\r\n        payload: data\r\n    });\r\n};\r\n\r\nexport const deleteTask = (id) => dispatch => {\r\n    dispatch({\r\n        type: DELETE_TASK,\r\n        payload: id\r\n    });\r\n};\r\n\r\nexport const editTask = (data) => dispatch => {\r\n    dispatch({\r\n        type: EDIT_TASK,\r\n        payload: data\r\n    });\r\n};\r\n\r\nexport const showAddTask = (status) => dispatch => {\r\n    dispatch({\r\n        type: IS_SHOW_ADD_TASK,\r\n        payload: status\r\n    });\r\n};\r\n\r\nexport const isDoneTask = (id) => dispatch => {\r\n    dispatch({\r\n        type: IS_DONE_TASK,\r\n        payload: id\r\n    });\r\n}\r\n\r\nexport const showMode = (value) => dispatch => {\r\n    dispatch({\r\n        type: SHOW_MODE,\r\n        payload: value\r\n    });\r\n}","import { connect, useDispatch, useSelector } from \"react-redux\";\r\nimport { addTask, showAddTask } from \"../../actions/taskActions\";\r\n\r\nfunction AddTask() {\r\n    const dispatch = useDispatch();\r\n    const lastID =\r\n        useSelector(state => {\r\n            if (state.tasks.taskList.length > 0) {\r\n                return state.tasks.taskList[state.tasks.taskList.length - 1].id\r\n            }\r\n            return 0\r\n        });\r\n\r\n    const isShow = useSelector(state => state.tasks.isShowAddTask);\r\n\r\n    const handleSubmitTask = (e) => {\r\n        e.preventDefault();\r\n\r\n        const data = {\r\n            id: lastID + 1,\r\n            title: e.target.title.value,\r\n            date: e.target.date.value,\r\n            description: e.target.description.value,\r\n            isDone: false\r\n        }\r\n\r\n        if (data.title) {\r\n            dispatch(addTask(data));\r\n            dispatch(showAddTask(false));\r\n\r\n            e.target.reset();\r\n        }\r\n    }\r\n\r\n    return isShow ? (\r\n        <form className=\"tasks__add\" onSubmit={handleSubmitTask}>\r\n            <h3>Add new task</h3>\r\n            <label htmlFor=\"title\">Title:</label>\r\n            <input type=\"text\" name=\"title\" id=\"title\" />\r\n\r\n            <label htmlFor=\"date\">Date:</label>\r\n            <input type=\"date\" name=\"date\" id=\"date\" />\r\n\r\n            <label htmlFor=\"description\">Description:</label>\r\n            <textarea name=\"description\" id=\"description\" cols=\"30\" rows=\"3\"></textarea>\r\n\r\n            <div>\r\n                <button className=\"btn--success\" style={{ marginRight: '.5rem' }}>Save</button>\r\n                <button type=\"button\" onClick={() => dispatch(showAddTask(false))}>Cancel</button>\r\n            </div>\r\n        </form>\r\n    ) : ''\r\n}\r\n\r\nexport default connect(null, { addTask })(AddTask)","import { useState } from 'react';\r\nimport { connect, useDispatch, useSelector } from \"react-redux\";\r\nimport { deleteTask, editTask, isDoneTask } from \"../../actions/taskActions\";\r\n\r\nfunction TaskItem(props) {\r\n    const { id, title, date, description } = props.data;\r\n    const dispatch = useDispatch();\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const doneStatus = useSelector(state => state.tasks.taskList.find(task => task.id === id).isDone);\r\n\r\n    const handleDelete = (id) => {\r\n        dispatch(deleteTask(id))\r\n    }\r\n\r\n    const handleEditSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        const newData = {\r\n            id: id,\r\n            title: e.target.title.value,\r\n            date: e.target.date.value,\r\n            description: e.target.description.value\r\n        }\r\n\r\n        dispatch(editTask(newData))\r\n        setIsEditing(false);\r\n    }\r\n\r\n    return <div className={\r\n        `tasks__item ${doneStatus ? 'tasks__item--done' : ''}`\r\n    }>\r\n        {\r\n            isEditing ?\r\n                <form onSubmit={handleEditSubmit}>\r\n                    <input type=\"text\" defaultValue={title} name=\"title\" />\r\n                    <input type=\"date\" defaultValue={date} name=\"date\" />\r\n                    <textarea defaultValue={description} name=\"description\" />\r\n\r\n                    <br />\r\n                    <br />\r\n\r\n                    <button className=\"btn--success\">Apply</button>\r\n                    <button type=\"button\" onClick={() => setIsEditing(false)}>Cancel</button>\r\n                </form>\r\n                :\r\n                <>\r\n                    <h2>{title}</h2>\r\n                    <h3>{date}</h3>\r\n                    <p>{description}</p>\r\n\r\n                    <footer>\r\n                        <button className=\"btn--danger\" onClick={() => handleDelete(id)}>Delete</button>\r\n                        <button className=\"btn--edit\" onClick={() => setIsEditing(true)}>Edit</button>\r\n                        <input type=\"checkbox\" defaultChecked={doneStatus} onChange={() => dispatch(isDoneTask(id))} />\r\n                    </footer>\r\n                </>\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default connect(null, { deleteTask })(TaskItem);","import { useSelector } from \"react-redux\";\r\nimport TaskItem from \"./TaskItem\";\r\n\r\nfunction TaskList() {\r\n    const list = useSelector(state => state.tasks.taskList) || []\r\n    const currentShowMode = useSelector(state => state.tasks.showMode);\r\n\r\n    const renderList = (list) => {\r\n        if (currentShowMode === \"done\") {\r\n            return list.filter(item => item.isDone);\r\n        } else if(currentShowMode === \"undone\") {\r\n            return list.filter(item => !item.isDone);\r\n        }\r\n        return list;\r\n    }\r\n\r\n    return (\r\n        <div className=\"tasks\">\r\n            {\r\n                renderList(list).length > 0 ? \r\n                renderList(list).map(item => <TaskItem key={item.id} className=\"tasks__item\" data={item} />)\r\n                : <p style={{\r\n                    padding: '3rem',\r\n                    textAlign: 'center',\r\n                    width: '100%'\r\n                }}>No tasks yet</p>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskList;","import { useDispatch } from \"react-redux\";\r\nimport { showAddTask } from \"../../actions/taskActions\";\r\n\r\nexport default function Header() {\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <header className=\"header\">\r\n            <h1>React redux CRUD</h1>\r\n\r\n            <button\r\n                onClick={() => dispatch(showAddTask(true))}\r\n                className=\"btn--success\">+ Add Task</button>\r\n        </header>\r\n    )\r\n}","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { showMode } from \"../../actions/taskActions\";\r\n\r\nexport default function Filter() {\r\n    const dispatch = useDispatch();\r\n    const currentShowMode = useSelector(state => state.tasks.showMode);\r\n\r\n    return (\r\n        <div className=\"tasks__filter\">\r\n            <span>\r\n                <input type=\"radio\" name=\"tasks_show\" id=\"all\"\r\n                    onChange={() => dispatch(showMode('all'))}\r\n                    defaultChecked={currentShowMode === 'all'} />\r\n                <label htmlFor=\"all\">All tasks</label>\r\n            </span>\r\n\r\n            <span>\r\n                <input type=\"radio\" name=\"tasks_show\" id=\"done\"\r\n                    onChange={() => dispatch(showMode('done'))}\r\n                    defaultChecked={currentShowMode === 'done'} />\r\n                <label htmlFor=\"done\">Done</label>\r\n            </span>\r\n\r\n            <span>\r\n                <input type=\"radio\" name=\"tasks_show\" id=\"undone\"\r\n                    onChange={() => dispatch(showMode('undone'))}\r\n                    defaultChecked={currentShowMode === 'undone'} />\r\n                <label htmlFor=\"undone\">Undone</label>\r\n            </span>\r\n        </div>\r\n    )\r\n}","import AddTask from \"../components/Task/AddTask\";\r\nimport TaskList from \"../components/Task/TaskList\";\r\nimport Header from \"../components/Header\";\r\nimport Filter from \"../components/Filter\";\r\n\r\nexport default function Tasks() {\r\n    return (\r\n        <>\r\n            <Header />\r\n            <Filter />\r\n            <AddTask />\r\n            <TaskList />\r\n        </>\r\n    );\r\n}","import { Provider } from 'react-redux';\r\nimport store from './store';\r\nimport Tasks from './Containers/Tasks';\r\nimport './main.scss'\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"App\">\r\n        <Tasks />\r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}